"use client"

import { useEffect } from 'react'
import { supabase } from '@/lib/supabase/client'

export default function AuthCallback() {
  useEffect(() => {
    const handleCallback = async () => {
      console.log('üîÑ Callback iniciado')
      
      try {
        // 1. Verificar URL y c√≥digo
        const currentUrl = window.location.href
        console.log('üìç URL actual:', currentUrl)
        
        const searchParams = new URLSearchParams(window.location.search)
        const code = searchParams.get('code')
        console.log('üé´ C√≥digo recibido:', code ? '‚úÖ' : '‚ùå')
        
        if (!code) {
          console.error('‚ùå No hay c√≥digo en la URL')
          window.location.replace('/madrid/login')
          return
        }

        // 2. Verificar sesi√≥n actual
        console.log('üîç Verificando sesi√≥n actual...')
        const { data: { session: currentSession } } = await supabase.auth.getSession()
        console.log('üì± Sesi√≥n actual:', currentSession ? 'Activa' : 'No hay sesi√≥n')

        // 3. Intentar intercambiar c√≥digo
        console.log('üîë Intentando intercambiar c√≥digo por sesi√≥n...')
        
        let exchangePromise
        try {
          console.log('üì§ Iniciando petici√≥n de intercambio...')
          exchangePromise = supabase.auth.exchangeCodeForSession(code)
          
          console.log('‚è≥ Esperando respuesta...')
          const result = await Promise.race([
            exchangePromise,
            new Promise((_, reject) => 
              setTimeout(() => reject(new Error('Timeout despu√©s de 10s')), 10000)
            )
          ])
          
          console.log('üì• Respuesta recibida:', {
            success: !!result && !result.error,
            hasData: !!result?.data,
            error: result?.error?.message || 'ninguno'
          })

          if (result?.error) {
            throw result.error
          }

          if (!result?.data?.session) {
            throw new Error('No se recibi√≥ sesi√≥n despu√©s del intercambio')
          }

          // 4. Verificar que obtuvimos una sesi√≥n
          console.log('‚úÖ Intercambio exitoso, verificando sesi√≥n final...')
          const { data: { session: finalSession } } = await supabase.auth.getSession()
          
          if (finalSession) {
            console.log('üéâ Sesi√≥n establecida correctamente, redirigiendo...')
            // Peque√±a pausa para asegurar que los logs se muestran
            await new Promise(resolve => setTimeout(resolve, 500))
            window.location.replace('/madrid/dashboard')
          } else {
            throw new Error('No se pudo establecer la sesi√≥n despu√©s del intercambio')
          }
        } catch (e) {
          console.error('‚ùå Error durante el intercambio:', e)
          // Peque√±a pausa para asegurar que los logs se muestran
          await new Promise(resolve => setTimeout(resolve, 500))
          window.location.replace('/madrid/login')
        }
      } catch (error) {
        console.error('‚ùå Error general en callback:', error)
        window.location.replace('/madrid/login')
      }
    }

    handleCallback()
  }, [])

  return (
    <main className="min-h-screen flex items-center justify-center">
      <div className="text-gray-700 text-lg">Procesando inicio de sesi√≥n‚Ä¶</div>
    </main>
  )
}